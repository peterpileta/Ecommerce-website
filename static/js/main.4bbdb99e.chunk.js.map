{"version":3,"sources":["components/Navbar/Navbar.js","redux/Shopping/shopping-types.js","redux/Shopping/shopping-actions.js","components/Products/Product.js","components/Products/Products.js","components/Cart/CartItem/CartItem.js","components/Cart/Cart.js","components/SingleItem/SingleItem.js","components/Checkout/Checkout.js","App.js","redux/Shopping/shopping-reducer.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["connect","state","cart","shop","useState","cartCount","setCartCount","useEffect","count","forEach","item","quantity","className","to","src","alt","ADD_TO_CART","REMOVE_FROM_CART","ADJUST_QUANTITY","LOAD_CURRENT_ITEM","addToCart","itemID","type","actionTypes","payload","id","dispatch","loadCurrentItem","productData","history","useHistory","qty","setQty","image","title","description","price","Button","color","variant","onClick","push","min","value","onChange","e","parseInt","target","products","currentItem","window","location","href","slice","map","prod","removeFromCart","adjustQty","itemData","input","setInput","htmlFor","totalPrice","setTotalPrice","totalItems","setTotalItems","items","useParams","Checkout","exact","path","component","Products","SingleItem","Cart","INITIAL_STATE","shopReducer","action","find","inCart","filter","rootReducer","combineReducers","store","createStore","composeWithDevTools","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bbdb99e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport './Navbar.css'\r\n\r\n\r\nconst Navbar = ({cart}) => {\r\n    const [cartCount, setCartCount] = useState()    \r\n\r\n    useEffect(() => {\r\n        let count=0;\r\n        cart.forEach((item) => {\r\n            count += item.quantity\r\n        });\r\n\r\n        \r\n        setCartCount(count);\r\n    },[cart, cartCount] )\r\n\r\n    return (\r\n        <div className='navbar'>\r\n            <Link to='/Shopping-mock-web-app' className='navbar-logo-link'>\r\n            <h2 className='navbar-header'>Peter's E-commerce Mock Site</h2>\r\n            </Link>\r\n\r\n            <Link to='/cart'>\r\n                <div className='navbar-cart'>\r\n                    <p className='cart-title'>Cart</p>\r\n                    <img className='cart-img' src='https://cdn-icons-png.flaticon.com/512/263/263142.png' alt='shopping-cart'/>\r\n                    <span>{cartCount}</span>\r\n                </div>\r\n            </Link>\r\n\r\n        </div>\r\n    )\r\n} \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cart: state.shop.cart\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)","export const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const ADJUST_QUANTITY = 'ADJUST_QUANTITY';\r\nexport const LOAD_CURRENT_ITEM = 'LOAD_CURRENT_ITEM';","import * as actionTypes from './shopping-types';\r\n\r\n\r\nexport const addToCart = (itemID, quantity) => {\r\n    return {\r\n        type: actionTypes.ADD_TO_CART,\r\n        payload: {\r\n            id: itemID,\r\n            quantity,\r\n        },\r\n    }\r\n}\r\n\r\nexport const removeFromCart = (itemID) => {\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_CART,\r\n        payload: {\r\n            id: itemID,\r\n        },\r\n    }\r\n}\r\n\r\nexport const adjustQty = (itemID, quantity) => {\r\n    return {\r\n        type: actionTypes.ADJUST_QUANTITY,\r\n        payload: {\r\n            id: itemID,\r\n            quantity,\r\n        }\r\n}\r\n}\r\n\r\nexport const loadCurrentItem = (item) => {\r\n    return {\r\n        type: actionTypes.LOAD_CURRENT_ITEM,\r\n        payload: item\r\n}\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport { addToCart, loadCurrentItem } from '../../redux/Shopping/shopping-actions'\r\nimport './product.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {Button} from '@mui/material'\r\n\r\nconst Product = ({productData, addToCart, loadCurrentItem}) => {\r\n    let history=useHistory();\r\n    const [qty, setQty] = useState(1);\r\n\r\n    const onChangeHandler = (e) => {\r\n        setQty(parseInt(e.target.value))\r\n        \r\n    }\r\n\r\n   \r\n    return (\r\n        <div className='product'>\r\n                <img className='product-img' src={productData.image} alt=''></img>\r\n                \r\n                <div className='product-details'>\r\n                    <p className='product-title'>{productData.title}</p>\r\n                    <p className='product-description'>{productData.description}</p>\r\n                    <p className='product-price'>${productData.price}</p>\r\n                </div>\r\n\r\n                <div className='product-buttons'>\r\n                    <Button color='info' className='button' variant='contained' onClick={() => {loadCurrentItem(productData);\r\n                                        history.push(`product/${productData.id}`)}}>View item</Button>\r\n                    <div><label>Qty: </label>\r\n                         <input \r\n                            min='1' \r\n                            type='number' \r\n                            value={qty}\r\n                            onChange={onChangeHandler}\r\n                            />\r\n                    </div>\r\n                    <Button variant='contained' color='success' className='button' onClick={() => addToCart(productData.id, qty)}>Add to cart</Button>\r\n                </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addToCart: (id, quantity) => dispatch(addToCart(id, quantity)),\r\n        loadCurrentItem: (item) => dispatch(loadCurrentItem(item))\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Product)","import React from 'react'\r\nimport Product from './Product'\r\nimport { connect } from 'react-redux'\r\nimport './product.css'\r\nimport { Redirect, useHistory } from 'react-router'\r\n\r\n\r\nconst Products = ({products, currentItem}) => {\r\n    let history = useHistory();\r\n\r\n    {/*Replaces github pages trailing slash in URL*/}\r\n    if (window.location.href.slice(-1) == '/') return <Redirect to ='/Shopping-mock-web-app' />\r\n\r\n    return (\r\n        <div className='frontpage'>\r\n        <div className=\"product-grid\">\r\n            {products.map((prod) => <Product key = {prod.id} productData ={prod} />)}\r\n        </div>\r\n        <button onClick= {()=> {history.push('/cart')}}>Go to cart</button>\r\n        <footer>Author - Peter Pileta</footer>\r\n        </div>\r\n    )\r\n    }\r\n\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            products: state.shop.products,\r\n            currentItem: state.shop.currentItem\r\n        }\r\n\r\n    }\r\n\r\n    export default connect(mapStateToProps)(Products)","import React, {useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {removeFromCart, adjustQty} from '../../../redux/Shopping/shopping-actions'\r\nimport './cartitem.css'\r\n\r\nconst CartItem = ({itemData, removeFromCart, adjustQty}) =>  {\r\n    const [input, setInput] = useState(itemData.quantity)\r\n    const onChangeHandler = (e) => {\r\n        setInput(e.target.value)\r\n        adjustQty(itemData.id, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='cartItem'>\r\n            <img className='cartItem-image' src={itemData.image} alt={itemData.title}></img>\r\n            <div className='cartItem-details'>\r\n                <p className='cart-details-title'>{itemData.title}</p>\r\n                <p className='cart-details-description'>{itemData.description}</p>\r\n                <p className='cart-details-price'>${itemData.price}</p>\r\n            </div>\r\n            <div className='cartItem-actions'>\r\n                <div>\r\n                    <label htmlFor='quantity'>Qty</label>\r\n                    <input \r\n                        min='1' \r\n                        type='number'            \r\n                        value={input}\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                </div>\r\n                <button onClick={() => removeFromCart(itemData.id)}>Remove</button>\r\n                <img src='' alt=''></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n            removeFromCart: (id) => {\r\n                dispatch(removeFromCart(id));\r\n            },\r\n            adjustQty: (id, value) => {\r\n                dispatch(adjustQty(id,value));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(CartItem)","import React, {useEffect, useState} from 'react'\r\nimport CartItem from './CartItem/CartItem'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from '@mui/material'\r\nimport './cart.css'\r\n\r\nconst Cart = ({cart}) => {\r\n    const [totalPrice, setTotalPrice] = useState(0)\r\n    const [totalItems, setTotalItems] = useState(0)\r\n\r\n\r\n    useEffect(() =>  {\r\n        let items=0;\r\n        let price=0;\r\n\r\n        cart.forEach((item) => {\r\n            items+= item.quantity;\r\n            price+= item.price*item.quantity;\r\n        })\r\n\r\n        setTotalPrice(price);\r\n        setTotalItems(items);\r\n\r\n    }, [cart, totalPrice, totalItems, setTotalPrice, setTotalItems])\r\n    \r\n    return (\r\n        <div className='cart'>\r\n            <div className='cart-items'>\r\n                {cart.map((item) => {\r\n                 return <CartItem key={item.id} itemData={item}/>\r\n                })}\r\n            </div>\r\n\r\n            <div className='cart-summary'>\r\n                <h4 className='summary-title'>Cart Summary</h4>\r\n                <div className='summary-price'>\r\n                    <p>Total items: {totalItems}</p>\r\n                    <p>Total price: ${totalPrice}</p>\r\n                </div>\r\n                <Link to='/checkout'><Button variant ='contained' className='button'>Checkout</Button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cart: state.shop.cart\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Cart);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {addToCart} from '../../redux/Shopping/shopping-actions'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\nimport { Button } from '@mui/material'\r\nimport './singleitem.css'\r\n/*************\r\nView item Page\r\n*************/\r\nconst SingleItem = ({currentItem, addToCart}) => {\r\nconst {id} = useParams();\r\n    \r\n    if (!currentItem) return <Redirect to ='/Shopping-mock-web-app' />\r\n\r\n    return (\r\n        <div className='singleItem'>\r\n            <img className='singleItem-image' src={currentItem.image} alt={currentItem.title} />\r\n            <div className='singleItem-details'>\r\n                    <p className='details-title flex'>{currentItem.title}</p>\r\n                    <p className='details-description flex'>{currentItem.description}</p>\r\n                    <p className='details-price flex'>${currentItem.price}</p>\r\n                    <div className='details-addButton flex'>\r\n                        <Button className='button' variant='contained' color='success' onClick={() => addToCart(currentItem.id, 1)}>Add to cart</Button>\r\n                    </div>\r\n            \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nconst mapStateToProps = (state) =>  {\r\n    return {\r\n    currentItem: state.shop.currentItem\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addToCart: (id, quantity) =>  {\r\n            dispatch(addToCart(id, quantity))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleItem)","import React from 'react'\r\nimport './checkout.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Checkout = () => {\r\n    return (\r\n        <div>\r\n            <span id='checkout-land'>Sorry, nothing for sale!</span>\r\n            <Link to='/Shopping-mock-web-app'><Button variant='contained' id='checkout-button'>Go back</Button></Link> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkout;","import {React, useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect, withRouter} from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar'\nimport Products from './components/Products/Products';\nimport Cart from './components/Cart/Cart'\nimport SingleItem from './components/SingleItem/SingleItem';\nimport Checkout from './components/Checkout/Checkout';\nimport { connect } from 'react-redux';\nimport './app.css';\n\nfunction App({currentItem}) {\n\n  return (\n    <div className='app'>\n      <Router>\n        <Navbar />  {/* Navbar component */}\n        <Switch>\n          <Route exact path='/Shopping-mock-web-app' component={Products}/>\n          <Route exact path='/product/:id' component={SingleItem} />\n          <Route exact path='/cart' component={Cart} />\n          <Route exact path='/checkout' component={Checkout} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentItem: state.shop.currentItem\n  }\n} \n\nexport default connect(mapStateToProps)(App)","import * as actionTypes from './shopping-types';\r\n\r\nconst INITIAL_STATE = {\r\n    products: [\r\n        {\r\n            id:1,\r\n            title: 'Desk fan',\r\n            description: 'A regular desk fan',\r\n            price: 15.0,\r\n            image: 'https://pyxis.nymag.com/v1/imgs/c6f/9d4/bbb8b4bc6b8c64fe0e4f2f378cf5d97738-honeywell-ht-900-turboforce-air-circulat.rsquare.w600.jpg',\r\n            quantity: 0\r\n        },\r\n\r\n        {\r\n            id:2,\r\n            title: 'Computer monitor',\r\n            description: 'A regular computer monitor',\r\n            price: 130.0,\r\n            image: 'https://i.insider.com/5ff4df7ed184b30018aad2e3?width=1136&format=jpeg',\r\n            quantity: 0\r\n\r\n        },\r\n\r\n        {\r\n            id:3,\r\n            title: 'Banana',\r\n            description: 'A regular banana',\r\n            price: 3.0,\r\n            image: 'https://www.freshmix.ro/wp-content/uploads/2018/03/27057-banana-600x600.jpg',\r\n            quantity: 0\r\n\r\n        },\r\n\r\n        \r\n        {\r\n            id:4,\r\n            title: 'White t-shirt',\r\n            description: 'A regular white t-shirt',\r\n            price: 10.0,\r\n            image: 'https://pyxis.nymag.com/v1/imgs/9aa/b7f/0b2bcd87ecdc80545622a833684a643539-white-tshirt.rsquare.w600.jpg',\r\n            quantity: 0\r\n\r\n        }\r\n\r\n    ], //Array of objects with properties - title, description, price, id, quantity and image\r\n    cart: [],\r\n    currentItem: null\r\n}\r\n\r\nconst shopReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.ADD_TO_CART:\r\n            const item = state.products.find((prod) => prod.id === action.payload.id)\r\n\r\n            const inCart = state.cart.find((item) => item.id === action.payload.id? true:false)\r\n            return {\r\n            ...state,\r\n            cart: inCart? state.cart.map((prod) => prod.id === action.payload.id? {...prod, quantity: (prod.quantity + action.payload.quantity)} : prod ): [...state.cart, {...item, quantity: action.payload.quantity}]\r\n            }\r\n\r\n        case actionTypes.REMOVE_FROM_CART:\r\n           \r\n            return {\r\n            ...state,\r\n            cart: state.cart.filter((item) => item.id !== action.payload.id)\r\n            }\r\n\r\n        case actionTypes.ADJUST_QUANTITY:\r\n\r\n            return {\r\n                ...state,\r\n                cart: state.cart.map((item) => item.id === action.payload.id\r\n                ? {...item, quantity: +action.payload.quantity} \r\n                : item)\r\n                }\r\n            \r\n        case actionTypes.LOAD_CURRENT_ITEM:\r\n\r\n            return {\r\n                ...state,\r\n                currentItem: action.payload\r\n                }\r\n\r\n            default: return state;\r\n    }\r\n}\r\n\r\nexport default shopReducer;","import { combineReducers } from 'redux'\r\nimport shopReducer from './Shopping/shopping-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    shop: shopReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer, composeWithDevTools())\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}